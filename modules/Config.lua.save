--[[
    ElvUI_SpellBinder
    Copyright (C) NÃ®ne-Shu'halo, All rights reserved.
]]--

local E, L, V, P, G = unpack(ElvUI) -- Engine, Locales, PrivateDB, ProfileDB, GlobalDB
local ACD = LibStub("AceConfigDialog-3.0-ElvUI")
local C = E:NewModule("SpellBinder_Config", "AceHook-3.0", "AceEvent-3.0", "AceTimer-3.0")
local SB = E:GetModule("SpellBinder")
local EP = LibStub("LibElvUIPlugin-1.0")

local addonName, addonTable = ...
local spellBookList = {}

local UsableHealingSpells = {}
local HealingSpells = {
    ["PALADIN"] = {
        ["BEACON_OF_VIRTUE"] = "Beacon of Virtue",
        ["FLASH_OF_LIGHT"] = "Flash of Light",
        ["HOLY_LIGHT"] = "Holy Light",
        ["HOLY_SHOCK"] = "Holy Shock",
        ["LAY_ON_HANDS"] = "Lay on Hands",
        ["LIGHT_OF_DAWN"] = "Light of Dawn",
        ["LIGHT_OF_THE_PROTECTOR"] = "Light of the Protector",
        ["HAND_OF_THE_PROTECTOR"] = "Hand of the Protector",
        ["LIGHT_OF_THE_MARTYR"] = "Light of the Martyr"
    },
    ["PRIEST"] = {
        ["FLASH_HEAL"] = "Flash Heal",
        ["PENANCE"] = "Penance",
        ["SHADOW_MEND"] = "Shadow Mend",
        ["HOLY_NOVA"] = "Holy Nova",
        ["POWER_WORD_RADIANCE"] = "Power Word: Radiance"
    }
}

local UsableOtherSpells = {}
local OtherSpells = {
    ["PALADIN"] = {
        ["ABSOLUTION"] = "Absolution",
        ["BLESSING_OF_FREEDOM"] = "Blessing of Freedom",
        ["BLESSING_OF_PROTECTION"] = "Blessing of Protection",
        ["BLESSING_OF_SACRIFICE"] = "Blessing of Sacrifice",
        ["CLEANSE"] = "Cleanse",
        ["DIVINE_PROTECTION"] = "Divine Protection",
        ["DIVINE_SHIELD"] = "Divine Shield",
        ["REDEMPTION"] = "Redemption"
    },
    ["PRIEST"] = {
        ["MIND_VISION"] = "Mind Vision",
        ["POWER_WORD_SHIELD"] = "Power Word: Shield",
        ["POWER_WORD_FORTITUDE"] = "Power Word: Fortitude",
        ["PURIFY"] = "Purify",
        ["RESURRECTION"] = "Resurrection",
        ["DESPERATE_PRAYER"] = "Desperate Prayer",
        ["PAIN_SUPPRESSION"] = "Pain Suppression",
        ["LEAP_OF_FAITH"] = "Leap of Faith",
        ["MASS_RESURRECTION"] = "Mass Resurrection",
        ["RESURRECTION"] = "Resurrection"
    }
}

local UsableCommands = {
    ["ASSIST"] = "Assist",
    ["FOCUS"] = "Focus",
    ["MENU"] = "Menu",
    ["TARGET"] = "Target"
}

local UsableItems = {}

-- defaults
P["SpellBinder"] = {
	["SpecBasedBindings"] = false,
	["AutoHidePvPTalents"] = false,
	["SpellBinderEnabled"] = true,
    ["SelectedHealAbility"] = nil,
    ["SelectedOtherAbility"] = nil,
    ["SelectedItem"] = nil,
    ["SelectedCommand"] = "ASSIST",
}

function C:UpdateUsableTable(whichTable)
    local sourceTable
    local targetTable
    local selectedAbility

    if whichTable == "healing" then
        sourceTable = HealingSpells
        targetTable = UsableHealingSpells
        selectedAbility = E.db.SpellBinder.SelectedHealAbility
    elseif whichTable == "other" then
        sourceTable = OtherSpells
        targetTable = UsableOtherSpells
        selectedAbility = E.db.SpellBinder.SelectedOtherAbility
    end

    -- Clear all target table data
    for key, _ in pairs(targetTable) do targetTable[key] = nil end

    -- Grab the players class for indexing into HealingSpells
    local _, englishClass, _ = UnitClass("player")

    -- Populate the UsableHealingSpells table with only the abilities the player can use
    for key, value in pairs(sourceTable[englishClass]) do
        if IsUsableSpell(value) then targetTable[key] = value end
    end

    -- Create an array from the table so it can be sorted so that we can select the first entry
    local tmp = {}
    for n in pairs(targetTable) do table.insert(tmp, n) end
    table.sort(tmp)

    -- Select the first ability as display default
    selectedAbility = nil
    selectedAbility = tostring(tmp[1])
end

function C:UpdateCommandTable() end
function C:UpdateItemTable() end

function GenerateBindMessage()
    local message = ""
    local button = GetMouseButtonClicked()

    if IsShiftKeyDown() then message = message .. "Shift+" end
    if IsAltKeyDown() then message = message .. "Alt+" end
    if IsControlKeyDown() then message = message .. "Ctrl+" end

    return " is now bound to " .. message .. button
end

function C:BindAbility(table, selected)
    if selected == nil or selected == "" then
        message = "Error: No ability selected"
    else
        message = table[selected] .. GenerateBindMessage()
    end

    UIErrorsFrame:AddMessage(message, 1.0, 0.5, 0.0, ChatTypeInfo["SYSTEM"], 0)
end

function C:InsertOptions()
	E.Options.args.SpellBinder = {
		type = "group",
		name = L["SpellBinder"],
        childGroups = "tab",
		get = function(info) return E.db.SpellBinder[ info[#info] ] end,
		set = function(info, value) E.db.SpellBinder[ info[#info] ] = value end,
		args = {
            intro = {
                order = 1,
                type = "description",
                name = L["SPELLBINDER_DESC"],
            },
			generalGroup = {
				order = 2,
				type = "group",
				name = L["General Options"],
				disabled = function() return not E:GetModule("SpellBinder"); end,
				args = {
                    enable = {
                        order = 1,
                        type = "toggle",
                        name = L["Enable"],
                        get = function(info)
                            return E.db.SpellBinder.SpellBinderEnabled
                        end,
                        set = function(info, value)
                            E.db.SpellBinder.SpellBinderEnabled = value
                        end
                    },
                    SpecBasedBindings = {
                        order = 2,
                        type = "toggle",
                        name = L["Spec Based Bindings"],
                        desc = "Swap profiles based on talent specialization",
                        get = function(info) return E.db.SpellBinder.SpecBasedBindings end,
                        set = function(info, value) E.db.SpellBinder.SpecBasedBindings = value end,
                    },
				},
			},
            bindingsGroup = {
                order = 3,
                type = "group",
                name = L["Bindings"],
                args = {
                    intro = {
                        order = 0,
                        type = "description",
                        name = L["Select the action to bind, then click the button with the key combination you'd like to use"],
                    },
                    leftGroup = {
                        order = 1,
                        type = "group",
                        name = "",
                        guiInline = true,
                        width = "half",

                        args = {
                            healingGroup = {
                                order = 1,
                                type = "group",
                                guiInline = true,
                                name = L["Healing Spells"],
                                args = {
                                    healingSpells = {
                                        order = 0,
                                        type = "select",
                                        name = "",
                                        desc = "List of healing spells in your spellbook",
                                        get = function(info) return E.db.SpellBinder.SelectedHealAbility end,
                                        set = function(info, value)
                                            E.db.SpellBinder.SelectedHealAbility = value
                                        end,
                                        values = UsableHealingSpells
                                    },
                                    healingBind = {
                                        order = 1,
                                        type = "execute",
                                        name = L["Bind Spell"],
                                        buttonElvUI = true,
                                        width = "half",
                                        func = function()
                                            C:BindAbility(UsableHealingSpells, E.db.SpellBinder.SelectedHealAbility)
                                        end,
                                        disabled = function() return not E:GetModule("SpellBinder"); end,
                                    },
                                },
                            },
                            otherGroup = {
                                order = 2,
                                type = "group",
                                guiInline = true,
                                name = L["Other Spells"],
                                args = {
                                    otherSpells = {
                                        order = 3,
                                        type = "select",
                                        name = "",
                                        desc = L["List of other spells in your spellbook"],
                                        get = function(info) return E.db.SpellBinder.SelectedOtherAbility end,
                                        set = function(info, value)
                                            E.db.SpellBinder.SelectedOtherAbility = value
                                        end,
                                        values = UsableOtherSpells
                                    },
                                    otherBind = {
                                        order = 4,
                                        type = "execute",
                                        name = L["Bind Spell"],
                                        buttonElvUI = true,
                                        width = "half",
                                        func = function()
                                            C:BindAbility(UsableOtherSpells, E.db.SpellBinder.SelectedOtherAbility)
                                        end,
                                        disabled = function() return not E:GetModule("SpellBinder"); end,
                                    },
                                },
                            },
                            itemGroup = {
                                order = 3,
                                type = "group",
                                guiInline = true,
                                name = L["Items"],
                                args = {
                                    items = {
                                        order = 6,
                                        type = "select",
                                        name = "",
                                        desc = L["List of available items"],
                                        get = function(info) return E.db.SpellBinder.SelectedItem end,
                                        set = function(info, value)
                                            E.db.SpellBinder.SelectedItem = value
                                        end,
                                        values = UsableItems
                                    },
                                    itemsBind = {
                                        order = 7,
                                        type = "execute",
                                        name = L["Bind Item"],
                                        buttonElvUI = true,
                                        width = "half",
                                        func = function()
                                            C:BindAbility(UsableItems, E.db.SpellBinder.SelectedItem)
                                        end,
                                        disabled = function() return not E:GetModule("SpellBinder"); end,
                                    },
                                },
                            },
                            commandGroup = {
                                order = 4,
                                type = "group",
                                guiInline = true,
                                name = L["Commands"],
                                args = {
                                    commands = {
                                        order = 9,
                                        type = "select",
                                        name = "",
                                        desc = L["List of available commands"],
                                        get = function(info) return E.db.SpellBinder.SelectedCommand end,
                                        set = function(info, value)
                                            E.db.SpellBinder.SelectedCommand = value
                                        end,
                                        values = UsableCommands
                                    },
                                    commandsBind = {
                                        order = 10,
                                        type = "execute",
                                        name = L["Bind Command"],
                                        buttonElvUI = true,
                                        width = "half",
                                        func = function()
                                            C:BindAbility(UsableCommands, E.db.SpellBinder.SelectedCommand)
                                        end,
                                        disabled = function() return not E:GetModule("SpellBinder"); end,
                                    },
                                },
                            },
                        },
                    },
                    rightGroup = {
                        order = 2,
                        type = "group",
                        name = "Other stuff",
                        guiInline = true,
                        width = "half",
                        args = {
                            intro = {
                                order = 1,
                                type = "description",
                                name = "Stuff goes here",
                            },
                        },
                    },
                },
			},
		},
	}
end

function C:UpdateBindingTables()
    C:UpdateUsableTable("healing")
    C:UpdateUsableTable("other")
    C:UpdateItemTable()
end

function C:OnPlayerEnterWorld()
    C:UpdateBindingTables()
end

function C:OnPlayerLevelUp()
    C:UpdateBindingTables()
end

function C:OnActiveTalentGroupChanged()
    C:UpdateBindingTables()
end

function C:OnPlayerInventoryChanged()
    -- TODO: Update items available for binding
end

function C:Initialize()
	EP:RegisterPlugin(addonName, C.InsertOptions)
    self:RegisterEvent("PLAYER_LOGIN", "OnPlayerEnterWorld");
    self:RegisterEvent("PLAYER_LEVEL_UP", "OnPlayerLevelUp");
    self:RegisterEvent("PLAYER_ENTERING_WORLD", "OnPlayerEnterWorld");
    self:RegisterEvent("ACTIVE_TALENT_GROUP_CHANGED", "OnActiveTalentGroupChanged");
    self:RegisterEvent("UNIT_INVENTORY_CHANGED", "OnPlayerInventoryChanged");
end

E:RegisterModule(C:GetName())


